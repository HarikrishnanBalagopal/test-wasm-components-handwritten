package wasi:filesystem@0.2.0;

interface types {
  use wasi:io/streams@0.2.0.{output-stream};
  use wasi:clocks/wall-clock@0.2.0.{datetime};
  use wasi:io/streams@0.2.0.{error};

  resource descriptor {
    write-via-stream: func(offset: filesize) -> result<output-stream, error-code>;
    append-via-stream: func() -> result<output-stream, error-code>;
    get-flags: func() -> result<descriptor-flags, error-code>;
    get-type: func() -> result<descriptor-type, error-code>;
    stat: func() -> result<descriptor-stat, error-code>;
  }

  type filesize = u64;

  enum error-code {
    access,
    would-block,
    already,
    bad-descriptor,
    busy,
    deadlock,
    quota,
    exist,
    file-too-large,
    illegal-byte-sequence,
    in-progress,
    interrupted,
    invalid,
    io,
    is-directory,
    loop,
    too-many-links,
    message-size,
    name-too-long,
    no-device,
    no-entry,
    no-lock,
    insufficient-memory,
    insufficient-space,
    not-directory,
    not-empty,
    not-recoverable,
    unsupported,
    no-tty,
    no-such-device,
    overflow,
    not-permitted,
    pipe,
    read-only,
    invalid-seek,
    text-file-busy,
    cross-device,
  }

  flags descriptor-flags {
    read,
    write,
    file-integrity-sync,
    data-integrity-sync,
    requested-write-sync,
    mutate-directory,
  }

  enum descriptor-type {
    unknown,
    block-device,
    character-device,
    directory,
    fifo,
    symbolic-link,
    regular-file,
    socket,
  }

  type link-count = u64;

  record descriptor-stat {
    %type: descriptor-type,
    link-count: link-count,
    size: filesize,
    data-access-timestamp: option<datetime>,
    data-modification-timestamp: option<datetime>,
    status-change-timestamp: option<datetime>,
  }

  filesystem-error-code: func(err: borrow<error>) -> option<error-code>;
}

interface preopens {
  use types.{descriptor};

  get-directories: func() -> list<tuple<descriptor, string>>;
}

